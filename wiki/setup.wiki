#summary Quick Start notes
[home] -> [setup]

<wiki:toc max_depth="2" />
----

= Create Your Product URM =

  * prerequisites (see framework diagram at https://code.google.com/p/shurm)
{{{
Allocate at least one Linux box for release activities.
It is better to create separate hosts for:
- Release Build Machine (build box)
- UAT/Test Administration Host (deploy box)
- Release Storage (distribution box)
Still you can have the only host for all purposes (release box).

Also you can move environment monitoring from deploy box to dedicated host (monitoring box)
You can have several build boxes, several deploy boxes and several monitoring boxes for the same product.
Otherwise, you can share these boxes to manage set of products and their environments.
}}}
  * framework setup
{{{
Accounts and access:
- create release-mgn account on build, deploy and distribution boxes
- create release-mon account on monitoring box
- create release-reader account on distribution box
- provide access to svn or git source code to build box
- provide access to UAT/Test hosts to deploy box
- provide access to distribution box to build and deploy boxes

Ensure build can be performed on build box:
- check maven and nexus are available to build box
- check proper jdk versions are installed
- install xmlstarlet 1.2.1 (or later) package
- install svn repository to store Your Product URM and database/configuration release items

Ensure environment management can be performed on deployment box:
- create release-mgn/release-mon ssh keypair and place public key to UAT/Test hosts
- install xmlstarlet 1.2.1 (or later) package
}}}
  * create Your Product URM module (see also [releases])
{{{
1. select Your Product URM home, e.g. /release-mgn/urm/myp
- set shell variable (add to profile) MYP_DEPLOYMENT_HOME to URM home (e.g. /release-mgn/urm/myp)
- do it first on one build box
2. create directory structure
	/release-mgn/urm/myp
	/release-mgn/urm/myp/etc
	/release-mgn/urm/myp/etc/env
	/release-mgn/urm/myp/master
3. download latest release, untar release archive to temporary directory, which will be populated by:
- upgrade.sh script
- master directory
4. cd to temporary directory and execute initial install using
	./upgrade.sh /release-mgn/urm/myp
5. copy master/samples/etc/config.sh to /release-mgn/urm/myp/etc
- change product identification properties in config.sh 
6. add Your Product URM to your svn repository
	svn import /release-mgn/urm/myp <my-svn-store-path>
7. distribute Your Product URM to all build, deploy and monitoring boxes
- svn co <my-svn-store-path> /release-mgn/urm/myp
- /release-mgn/urm/myp/master/svnget.sh /release-mgn/urm/myp
}}}

= Configure Your Product URM =

  * define your product
{{{
Basic product configuration parameters need to be defined in etc/config.sh (see sample):
- product identification data
- certain product configuration data like list of database schemas
- filesystem paths like git mirror repositories or release filesystem
- major release information

List source code repositories in etc/source.xml (see samples/etc/source.xml)
- repository should have specific structure (see build docs)
- product repository set defines build and tagging units
- one repository produces set of distribution binaries and/or intermediate build objects
- order of repositories in source.xml defines how to build all the product from the scratch
- define items that are built beyond of URM framework and can be downloaded from specific storage locations

List possible distributive items and their structure in etc/distr.xml (see samples/etc/distr.xml):
- define binary files and archives and naming policy
- combine several binary distributive items to binary components
- define configuration components as sets of specific confiuguration files

Define your environments (see samples/etc/env):
- product can have unlimited number of environments having different configurations
- every file stored in samples/etc/env defines additional environment
}}}
  * construct environment script wrappers
{{{
URM design simplifies using URM and prevents from executing scripts with improper parameters:
- URM provides wrappers approach for distinct build modes and environments
- wrappers are scripts placed in additional directory and calling genuine code scripts.
- wrapper directory defines context of execution, so you don''t need to set basic parameters

Build modes and their wrappers are supplied with URM release.
Wrappers and their directories for environments are created in Your Product URM location:
- just after (re)defining environment(s), you need to update wrappers by calling master/configure.sh
- single-dc environments slightly differ in structure from multi-dc environments
}}}
  * save Your Product URM in your svn repository and redistribute:
{{{
- execute master/svnsave.sh to save (re)configuration results in your svn
- redistribute Your Product URM to all build, deploy and monitoring boxes:
	./svnget.sh <myproduct_home>
}}}

= Upgrade URM Version =

TBD

= Next Steps =

TBD